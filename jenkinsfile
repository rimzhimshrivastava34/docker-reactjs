pipeline {
    agent any

    environment {
        IMAGE_NAME = 'rimzhimshri/react-app'
        DOCKER_CREDENTIALS_ID = 'docker-hub'
        CONTAINER_NAME = 'react-app-container'
        CONTAINER_PORT = '3000'
        IMAGE_PORT = '80'
    }

    stages {
        stage('Clone from GitHub') {
            steps {
                git credentialsId: 'devops', url: 'https://github.com/rimzhimshrivastava34/docker-reactjs.git', branch: 'master'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build("${IMAGE_NAME}:${BUILD_NUMBER}")
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_CREDENTIALS_ID}") {
                        dockerImage.push()
                        dockerImage.push('latest')
                    }
                }
            }
        }

        stage('Deploy Container') {
            steps {
                script {
                    // If container exists, remove it; else do nothing
                    sh """
                        if [ \$(docker ps -a -q -f name=${CONTAINER_NAME}) ]; then
                            echo "üõë Stopping and removing existing container..."
                            docker stop ${CONTAINER_NAME}
                            docker rm ${CONTAINER_NAME}
                        else
                            echo "‚ÑπÔ∏è No existing container found, skipping removal."
                        fi

                        echo "üöÄ Running new container..."
                        docker run -d -p ${CONTAINER_PORT}:${IMAGE_PORT} --name ${CONTAINER_NAME} ${IMAGE_NAME}:${BUILD_NUMBER}
                    """
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ Deployment successful!'
        }
        failure {
            echo '‚ùå Build or Deployment failed.'
        }
    }
}
